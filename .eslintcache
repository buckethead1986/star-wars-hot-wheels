[{"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/index.js":"1","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/reportWebVitals.js":"2","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/App.js":"3","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/Container.js":"4","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/Drawer.js":"5","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/GridItemsContainer.js":"6","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/Searchbar.js":"7","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/DrawerList.js":"8","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/StarWarsShips.js":"9","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/StarWarsDataGrid.js":"10","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/UnusedComponents/StarWarsGridItem.js":"11","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/UnusedComponents/LargeStarWarsGridItem.js":"12"},{"size":500,"mtime":1608264931061,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1608264931062,"results":"15","hashOfConfig":"14"},{"size":185,"mtime":1609387785996,"results":"16","hashOfConfig":"14"},{"size":1357,"mtime":1610865076483,"results":"17","hashOfConfig":"14"},{"size":5283,"mtime":1610865153844,"results":"18","hashOfConfig":"14"},{"size":2973,"mtime":1610865411101,"results":"19","hashOfConfig":"14"},{"size":2593,"mtime":1610607180064,"results":"20","hashOfConfig":"14"},{"size":2672,"mtime":1610864986400,"results":"21","hashOfConfig":"14"},{"size":22341,"mtime":1610939780371,"results":"22","hashOfConfig":"14"},{"size":1752,"mtime":1610864656413,"results":"23","hashOfConfig":"14"},{"size":2180,"mtime":1609912280996,"results":"24","hashOfConfig":"14"},{"size":1884,"mtime":1610079313194,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bnegul",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/index.js",[],["56","57"],"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/reportWebVitals.js",[],"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/App.js",[],"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/Container.js",["58"],"import React from \"react\";\nimport Drawer from \"./Drawer.js\";\nimport GridItemsContainer from \"./GridItemsContainer.js\";\n\nexport default function Container() {\n  const [value, setValue] = React.useState(\"\");\n  const [selected, setSelected] = React.useState(\"\");\n  const [selectedShipType, setSelectedShipType] = React.useState(\"\");\n  // const [filteredValue, setFilteredValue] = React.useState(\"\");\n\n  // const handleDrawerData = drawerData => {\n  //   setFilteredValue(drawerData !== undefined ? drawerData : \"\");\n  // };\n  const handleSearchbarData = searchbarData => {\n    setValue(searchbarData !== undefined ? searchbarData : \"\");\n  };\n  const handleSelectedShipType = selectedShipTypeData => {\n    console.log(selectedShipTypeData);\n    setSelectedShipType(\n      selectedShipTypeData !== undefined ? selectedShipTypeData : \"\"\n    );\n  };\n\n  //toggles bigger paper view for selected ship\n  const handleSelect = clickId => {\n    setSelected(selected === clickId ? \"\" : clickId);\n  };\n  // <GridItemsContainer filteredValue={filteredValue} value={value} />\n  return (\n    <div>\n      <Drawer\n        handleSelectedShipType={handleSelectedShipType}\n        handleSearchbarData={handleSearchbarData}\n        handleSelect={handleSelect}\n        selectedShipType={selectedShipType}\n        value={value}\n        selected={selected}\n      />\n    </div>\n  );\n}\n","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/Drawer.js",[],"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/GridItemsContainer.js",["59","60"],"import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles } from \"@material-ui/core/Styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\nimport StarWarsGridItem from \"../UnusedComponents/StarWarsGridItem.js\";\nimport StarWarsDataGrid from \"./StarWarsDataGrid.js\";\nimport LargeStarWarsGridItem from \"../UnusedComponents/LargeStarWarsGridItem.js\";\nimport { starWarsShips } from \"./StarWarsShips.js\";\nimport Paper from \"@material-ui/core/Paper\";\n\n//'paper' class only used for divider, remove in final\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\n\nexport default function SimpleContainer(props) {\n  const classes = useStyles();\n  console.log(props);\n\n  const makeSelectedGridItems = (\n    <Grid container>\n      {starWarsShips\n        .filter(item =>\n          item.name.toLowerCase().includes(props.value.toLowerCase())\n        )\n        .map((ship, index) => (\n          <Grid item xs={12} sm={6}>\n            <StarWarsGridItem\n              ship={ship}\n              selected={props.selected}\n              handleSelect={props.handleSelect}\n            />\n          </Grid>\n        ))}\n      <Grid item xs={12}>\n        <Paper className={classes.paper}>Divider</Paper>\n      </Grid>\n    </Grid>\n  );\n\n  const makeShipTypeGridItems = (\n    <Grid container>\n      {starWarsShips\n        .filter(item => item.type === props.selectedShipType)\n        .map((ship, index) => (\n          <Grid item xs={12} sm={6}>\n            <StarWarsGridItem\n              ship={ship}\n              selected={props.selected}\n              handleSelect={props.handleSelect}\n            />\n          </Grid>\n        ))}\n      <Grid item xs={12}>\n        <Paper className={classes.paper}>Divider</Paper>\n      </Grid>\n    </Grid>\n  );\n\n  const makeLargeStarWarsGridItems = (\n    <Grid container>\n      {starWarsShips.map((ship, index) => (\n        <Grid item xs={12}>\n          <LargeStarWarsGridItem\n            ship={ship}\n            selected={props.selected}\n            handleSelect={props.handleSelect}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"xl\">\n        <Typography\n          component=\"div\"\n          style={{ backgroundColor: \"#cfe8fc\", height: \"100%\" }}\n        >\n          {makeShipTypeGridItems}\n          <StarWarsDataGrid\n            selectedShipType={props.selectedShipType}\n            value={props.value}\n            selected={props.selected}\n            handleSelect={props.handleSelect}\n          />\n\n          {makeSelectedGridItems}\n        </Typography>\n      </Container>\n    </React.Fragment>\n  );\n}\n","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/Searchbar.js",["61"],"/* eslint-disable no-use-before-define */\nimport React from \"react\";\nimport { fade, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { starWarsShips } from \"./StarWarsShips.js\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    border: \"1px solid #e2e2e1\",\n    overflow: \"hidden\",\n    borderRadius: 4,\n    backgroundColor: \"#fcfcfb\",\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n    \"&:hover\": {\n      backgroundColor: \"#fff\"\n    },\n    \"&$focused\": {\n      backgroundColor: \"#fff\",\n      boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\n      borderColor: theme.palette.primary.main\n    }\n  },\n  focused: {}\n}));\n\nconst searchbarRegex = string => {\n  //tests search input against regex for common mispellings of X-Wing, Y-Wing, AT-AT, etc.\n  let lowerCaseString = string !== undefined ? string.toLowerCase() : \"\";\n  let variable = lowerCaseString.substring(0, 1);\n  let regexChecker = dynamicRegexCreator(lowerCaseString, variable);\n  const atst = /^at.?st/;\n  const atat = /^at.?at/; //simplified version of below with string set to lowercase\n  // const atat = /^[Aa][Tt].?[Aa][Tt]/ //matches misspellings of AT-AT. Capital or lowercase 'AT's, with any character or no character in between\n  if (regexChecker.test(lowerCaseString)) {\n    let substring = variable + \"-wing\";\n    return substring;\n  } else if (atst.test(lowerCaseString)) {\n    return \"at-st\";\n  } else if (atat.test(lowerCaseString)) {\n    return \"at-at\";\n  } else {\n    return lowerCaseString;\n  }\n};\n\n//makes regex for x, y, b, u, a-wing misspellings: xwing, x=wing, x wing, etc.\nconst dynamicRegexCreator = (lowerCaseString, variable) => {\n  const regex = new RegExp(\"^\" + variable + \".?w\");\n  return regex;\n};\n\nexport default function SearchBox(props) {\n  const classes = useStyles();\n\n  return (\n    <Autocomplete\n      id=\"star-wars-searchbar\"\n      freeSolo\n      onChange={(event, value) => {\n        props.handleSearchbarData(searchbarRegex(value));\n      }}\n      options={starWarsShips.map(ship => ship.name)}\n      renderInput={params => (\n        <div>\n          <TextField\n            classes={{ root: classes.root }}\n            style={{\n              width: 300, //remove width parameter for searchbar inside drawer\n              position: \"relative\"\n            }}\n            {...params}\n            placeholder=\"Search\"\n            margin=\"dense\"\n            variant=\"outlined\"\n          />\n        </div>\n      )}\n    />\n  );\n}\n","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/DrawerList.js",["62"],"import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nconst useStyles = makeStyles(theme => ({\n  nested: {\n    paddingLeft: theme.spacing(4)\n  }\n}));\n\nexport default function DrawerList(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [checked, setChecked] = React.useState([]);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleToggle = (item, value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n    props.handleSelectedShipType(item);\n  };\n\n  const makeListItems = (\n    <List>\n      {props.list.map((item, index) => {\n        const labelId = `checkbox-list-secondary-label-${index}`;\n        return (\n          <ListItem\n            button\n            onClick={event => props.handleSelectedShipType(item)}\n            key={item}\n            className={classes.nested}\n          >\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={item} />\n            <ListItemSecondaryAction>\n              <Checkbox\n                edge=\"end\"\n                onChange={handleToggle(item, index)}\n                checked={checked.indexOf(index) !== -1}\n                inputProps={{ \"aria-labelledby\": labelId }}\n              />\n            </ListItemSecondaryAction>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n\n  return (\n    <List component=\"div\" disablePadding>\n      <ListItem button onClick={handleOpen}>\n        <ListItemIcon>\n          <InboxIcon />\n        </ListItemIcon>\n        <ListItemText primary={props.primary} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {makeListItems}\n      </Collapse>\n    </List>\n  );\n}\n","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/StarWarsShips.js",["63"],"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/components/StarWarsDataGrid.js",["64","65","66"],"import * as react from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { starWarsShips } from \"./StarWarsShips.js\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\"\n  }\n}));\n\nexport default function DataGridDemo(props) {\n  const classes = useStyles();\n\n  const columns = [\n    {\n      field: \"src\",\n      headerName: \"Image\",\n      width: 128,\n      renderCell: params => (\n        <img className={classes.img} alt=\"complex\" src={params.value} />\n      )\n    },\n    {\n      field: \"id\",\n      headerName: \"ID\",\n      flex: 0.3\n    },\n    { field: \"name\", headerName: \"Name\", flex: 1.5 },\n    { field: \"year\", headerName: \"Year\", flex: 0.5 },\n    {\n      field: \"model\",\n      headerName: \"Model\",\n      flex: 0.5\n    },\n    { field: \"pack\", headerName: \"Pack Type\", flex: 0.5 },\n    { field: \"pack-img\", headerName: \"Pack Image\", flex: 0.5 },\n    { field: \"type\", headerName: \"Ship Type\", flex: 0.5 },\n    { field: \"special\", headerName: \"Extra\", flex: 0.5 }\n  ];\n\n  const gridWrapperRef = react.useRef(null);\n  react.useLayoutEffect(() => {\n    const gridDiv = gridWrapperRef.current;\n    if (gridDiv) {\n      const gridEl: HTMLDivElement = gridDiv.querySelector(\"div\");\n      gridEl.style.height = \"\";\n    }\n  });\n\n  return (\n    <div ref={gridWrapperRef}>\n      <DataGrid\n        rows={starWarsShips}\n        columns={columns}\n        checkboxSelection\n        autoHeight\n        rowHeight={128}\n        showCellRightBorder={true}\n        showColumnRightBorder={true}\n      />\n    </div>\n  );\n}\n","/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/UnusedComponents/StarWarsGridItem.js",[],"/Users/robertpeck/Development/code/react_labs/star-wars-hot-wheels/src/UnusedComponents/LargeStarWarsGridItem.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":3,"column":8,"nodeType":"73","messageId":"74","endLine":3,"endColumn":26},{"ruleId":"71","severity":1,"message":"75","line":7,"column":8,"nodeType":"73","messageId":"74","endLine":7,"endColumn":15},{"ruleId":"71","severity":1,"message":"76","line":71,"column":9,"nodeType":"73","messageId":"74","endLine":71,"endColumn":35},{"ruleId":"71","severity":1,"message":"77","line":3,"column":28,"nodeType":"73","messageId":"74","endLine":3,"endColumn":36},{"ruleId":"71","severity":1,"message":"78","line":23,"column":9,"nodeType":"73","messageId":"74","endLine":23,"endColumn":14},{"ruleId":"79","severity":1,"message":"80","line":952,"column":1,"nodeType":"81","endLine":952,"endColumn":34},{"ruleId":"71","severity":1,"message":"82","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":19},{"ruleId":"71","severity":1,"message":"83","line":2,"column":21,"nodeType":"73","messageId":"74","endLine":2,"endColumn":29},{"ruleId":"71","severity":1,"message":"84","line":6,"column":8,"nodeType":"73","messageId":"74","endLine":6,"endColumn":14},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'GridItemsContainer' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'makeLargeStarWarsGridItems' is assigned a value but never used.","'useTheme' is defined but never used.","'theme' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]